<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title>Rowan Manning's Blog</title>
    <link href="http://rowanmanning.co.uk/blog.xml" rel="self"/>
    <link href="http://rowanmanning.co.uk/"/>
    <updated>2013-02-08T07:41:20.920Z</updated>
    <id>http://rowanmanning.co.uk/blog.xml</id>
    <author>
        <name>Rowan Manning</name>
        <uri>http://rowanmanning.co.uk/</uri>
    </author>

    
        <entry>
            <title>Node Cluster and Express</title>
            <link href="http://rowanmanning.co.uk/posts/node-cluster-and-express"/>
            <published>2013-01-10T20:18:00+00:00</published>
            <updated>2013-01-10T20:18:00+00:00</updated>
            <id>http://rowanmanning.co.uk/posts/node-cluster-and-express</id>
            <content type="html">&lt;p&gt;Over the last couple of evenings, I&amp;#39;ve been playing with the &lt;a href=&quot;http://nodejs.org/api/cluster.html&quot;&gt;Node.js Cluster module&lt;/a&gt; and using it to dramatically improve the amount of load Express apps can handle. The results have been amazing.

&lt;/p&gt;
&lt;p&gt;The Cluster module is fairly easy to pick up if you&amp;#39;re used to working with Node, but I thought I&amp;#39;d blog about my experience – hopefully it will help you either understand or see the benefit of clustering!


&lt;/p&gt;
&lt;h2&gt;What Does Cluster Do?&lt;/h2&gt;
&lt;p&gt;Node.js runs in a single thread. While it&amp;#39;s still very fast in most cases, this really doesn&amp;#39;t take advantage of multiple processors if they&amp;#39;re available. The Cluster module allows you to create a small network of separate processes which can share server ports; this gives your Node app access to the full power of your server.


&lt;/p&gt;
&lt;h2&gt;Learn By Example&lt;/h2&gt;
&lt;p&gt;Let&amp;#39;s build a simple Express application to start with. Then we&amp;#39;ll add clustering. If you&amp;#39;d like to follow along, you&amp;#39;ll need to &lt;a href=&quot;http://nodejs.org/download/&quot;&gt;install Node.js&lt;/a&gt; (0.8+ with npm). This tutorial also assumes a moderate amount of JavaScript, Node and &lt;a href=&quot;http://expressjs.com/&quot;&gt;Express&lt;/a&gt; knowledge.

&lt;/p&gt;
&lt;p&gt;All of the source code for the application we&amp;#39;re creating here is &lt;a href=&quot;https://github.com/rowanmanning/learning-express-cluster&quot;&gt;available on GitHub&lt;/a&gt;.

&lt;/p&gt;
&lt;p&gt;Create a new directory for this tutorial, and add a file called &lt;code&gt;package.json&lt;/code&gt; with the following code:

&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;{
    &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;learning-express-cluster&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;: {
        &lt;span class=&quot;string&quot;&gt;&quot;express&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;3.0.x&quot;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run &lt;code&gt;npm install&lt;/code&gt; from within your project directory, this will install Express. Now we can create a new file, &lt;code&gt;app.js&lt;/code&gt;:

&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Include Express&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; express = require(&lt;span class=&quot;string&quot;&gt;'express'&lt;/span&gt;);

&lt;span class=&quot;comment&quot;&gt;// Create a new Express application&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = express();

&lt;span class=&quot;comment&quot;&gt;// Add a basic route – index page&lt;/span&gt;
app.get(&lt;span class=&quot;string&quot;&gt;'/'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(req, res)&lt;/span&gt; {&lt;/span&gt;
    res.send(&lt;span class=&quot;string&quot;&gt;'Hello World!'&lt;/span&gt;);
});

&lt;span class=&quot;comment&quot;&gt;// Bind to a port&lt;/span&gt;
app.listen(&lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;);
console.log(&lt;span class=&quot;string&quot;&gt;'Application running!'&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have a basic Express app, you can run it from the command line with &lt;code&gt;node app.js&lt;/code&gt;. When you go to &lt;a href=&quot;http://localhost:3000/&quot;&gt;http://localhost:3000/&lt;/a&gt;, you should see the message &amp;quot;Hello world!&amp;quot; in your browser.

&lt;/p&gt;
&lt;p&gt;That&amp;#39;s all well and good, but let&amp;#39;s get down to the point of this post – clustering! It&amp;#39;s surprisingly simple; we&amp;#39;ll update &lt;code&gt;app.js&lt;/code&gt; line by line and explain the process.

&lt;/p&gt;
&lt;p&gt;First, we add a new line at the very top of the file:

&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Include the cluster module&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cluster = require(&lt;span class=&quot;string&quot;&gt;'cluster'&lt;/span&gt;);

...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we&amp;#39;re going to add a conditional to &lt;code&gt;app.js&lt;/code&gt; which wraps all of our Express application functionality. Update your file to look like this:

&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Include the cluster module&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cluster = require(&lt;span class=&quot;string&quot;&gt;'cluster'&lt;/span&gt;);

&lt;span class=&quot;comment&quot;&gt;// Code to run if we're in the master process&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (cluster.isMaster) {

    ...

&lt;span class=&quot;comment&quot;&gt;// Code to run if we're in a worker process&lt;/span&gt;
} &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {

    &lt;span class=&quot;comment&quot;&gt;// Include Express&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; express = require(&lt;span class=&quot;string&quot;&gt;'express'&lt;/span&gt;);

    &lt;span class=&quot;comment&quot;&gt;// Create a new Express application&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = express();

    &lt;span class=&quot;comment&quot;&gt;// Add a basic route – index page&lt;/span&gt;
    app.get(&lt;span class=&quot;string&quot;&gt;'/'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(req, res)&lt;/span&gt; {&lt;/span&gt;
        res.send(&lt;span class=&quot;string&quot;&gt;'Hello World!'&lt;/span&gt;);
    });

    &lt;span class=&quot;comment&quot;&gt;// Bind to a port&lt;/span&gt;
    app.listen(&lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;);
    console.log(&lt;span class=&quot;string&quot;&gt;'Application running!'&lt;/span&gt;);

}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we&amp;#39;re doing here is detecting whether the application is being run in the &amp;#39;master&amp;#39; process (the one you start from the command line) or a &amp;#39;worker&amp;#39; process (a process created by the master).

&lt;/p&gt;
&lt;p&gt;Your application code can stay pretty much the same, which makes it fairly easy to add clustering to an existing application.

&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s write the code for the master process, we&amp;#39;re almost done! Fill out the first half of the conditional to look like this:

&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;...

&lt;span class=&quot;comment&quot;&gt;// Code to run if we're in the master process&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (cluster.isMaster) {

    &lt;span class=&quot;comment&quot;&gt;// Count the machine's CPUs&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cpuCount = require(&lt;span class=&quot;string&quot;&gt;'os'&lt;/span&gt;).cpus().length;

    &lt;span class=&quot;comment&quot;&gt;// Create a worker for each CPU&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; cpuCount; i += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) {
        cluster.fork();
    }

&lt;span class=&quot;comment&quot;&gt;// Code to run if we're in a worker process&lt;/span&gt;
} &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {

...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All we&amp;#39;re doing above is counting the number of CPUs your machine has, and calling &lt;code&gt;cluster.fork&lt;/code&gt; for each. For example, If your machine has four CPUs then &lt;code&gt;cluster.fork&lt;/code&gt; will be called four times, creating four new processes.

&lt;/p&gt;
&lt;p&gt;The new worker processes we create will run the same &lt;code&gt;app.js&lt;/code&gt; JavaScript file as the master, except it will use the code in the &lt;code&gt;else&lt;/code&gt; statement. This is obviously because &lt;code&gt;cluster.isMaster&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; within a worker.

&lt;/p&gt;
&lt;p&gt;If you run &lt;code&gt;node app.js&lt;/code&gt; now, nothing will look different. The only thing you&amp;#39;ll notice is that the message &amp;quot;Application running!&amp;quot; will appear more than once in your command line.

&lt;/p&gt;
&lt;p&gt;Before we finish up, let&amp;#39;s output the worker ID so you can tell which worker is serving your page each time it loads. Replace the following lines:

&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;res.send(&lt;span class=&quot;string&quot;&gt;'Hello World!'&lt;/span&gt;);

...

console.log(&lt;span class=&quot;string&quot;&gt;'Application running!'&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with these:

&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;res.send(&lt;span class=&quot;string&quot;&gt;'Hello from Worker '&lt;/span&gt; + cluster.worker.id);

...

console.log(&lt;span class=&quot;string&quot;&gt;'Worker '&lt;/span&gt; + cluster.worker.id + &lt;span class=&quot;string&quot;&gt;' running!'&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when you run the application, you should see the workers being started in your command line. When you revisit &lt;a href=&quot;http://localhost:3000/&quot;&gt;http://localhost:3000/&lt;/a&gt; you should see the message &amp;quot;Hello from Worker X&amp;quot; where X is the ID of the worker serving you.

&lt;/p&gt;
&lt;p&gt;Try opening the page in multiple tabs and browsers – you should see varying workers.


&lt;/p&gt;
&lt;h2&gt;The Proof Is In The Pudding&lt;/h2&gt;
&lt;p&gt;So far, you&amp;#39;ve taken my word for it that clustering is fast. The last thing I&amp;#39;m going to do here is run some benchmarks on the application before and after adding clustering.

&lt;/p&gt;
&lt;p&gt;Because the application is so minimal now, I added a long loop to the index route to help illustrate how a clustered application performs better under heavy load.

&lt;/p&gt;
&lt;p&gt;Without clustering:

&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;bash&quot;&gt;$ siege -c100 -t1M http://localhost:3000/
Transactions:                263 hits
Availability:                100.00 %
Elapsed time:                59.50 secs
Data transferred:            849.99 MB
Response time:               19.41 secs
Transaction rate:            4.42 trans/sec
Throughput:                  14.29 MB/sec
Concurrency:                 85.79
Successful transactions:     263
Failed transactions:         0
Longest transaction:         34.57
Shortest transaction:        10.07&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With clustering:

&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;bash&quot;&gt;$ siege -c100 -t1M http://localhost:3000/
Transactions:                811 hits
Availability:                100.00 %
Elapsed time:                59.25 secs
Data transferred:            2621.08 MB
Response time:               6.50 secs
Transaction rate:            13.69 trans/sec
Throughput:                  44.24 MB/sec
Concurrency:                 88.96
Successful transactions:     811
Failed transactions:         0
Longest transaction:         16.47
Shortest transaction:        0.54&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think you&amp;#39;ll agree that that&amp;#39;s a worthwhile performance increase for only a few lines of code ;)


&lt;/p&gt;
&lt;h2&gt;Bonus Code: Coping With Death&lt;/h2&gt;
&lt;p&gt;Last but not least, there&amp;#39;s one last thing that would be useful to add to our application. In the (hopefully unlikely) event that one of our worker processes dies, we&amp;#39;ll want to make sure we spawn another; otherwise we could eventually end up just running an empty master process and losing all our requests!

&lt;/p&gt;
&lt;p&gt;This is also incredibly easy to do by binding to the cluster &amp;#39;exit&amp;#39; event. Add the following code directly beneath the loop which creates our initial workers. It&amp;#39;s fairly self-explanatory:

&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;...

&lt;span class=&quot;comment&quot;&gt;// Listen for dying workers&lt;/span&gt;
cluster.on(&lt;span class=&quot;string&quot;&gt;'exit'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(worker)&lt;/span&gt; {&lt;/span&gt;

    &lt;span class=&quot;comment&quot;&gt;// Replace the dead worker,&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// we're not sentimental&lt;/span&gt;
    console.log(&lt;span class=&quot;string&quot;&gt;'Worker '&lt;/span&gt; + worker.id + &lt;span class=&quot;string&quot;&gt;' died :('&lt;/span&gt;);
    cluster.fork();

});

...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we don&amp;#39;t have to worry as much if something goes horribly wrong in one of our workers!

&lt;/p&gt;
&lt;p&gt;I hope you enjoyed this tutorial. As mentioned above, you can get a hold of the &lt;a href=&quot;https://github.com/rowanmanning/learning-express-cluster&quot;&gt;source code for the examples on GitHub&lt;/a&gt;. For more information, check out the &lt;a href=&quot;http://nodejs.org/api/cluster.html&quot;&gt;Node.js Cluster module documentation&lt;/a&gt;.

&lt;/p&gt;
&lt;p&gt;Thanks for reading.


&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>The Mixed Blessing Of Ambition</title>
            <link href="http://rowanmanning.co.uk/posts/the-mixed-blessing-of-ambition"/>
            <published>2012-12-04T20:13:00+00:00</published>
            <updated>2012-12-04T20:13:00+00:00</updated>
            <id>http://rowanmanning.co.uk/posts/the-mixed-blessing-of-ambition</id>
            <content type="html">&lt;p&gt;I was talking to a friend recently about getting back into game development; he was very enthusiastic about learning to develop JavaScript games and we were discussing where to start. I had one of those moments when you impart some advice to somebody, and afterwards realise that it&amp;#39;s great advice you&amp;#39;ve been ignoring yourself. The advice in this case was: &amp;quot;Don&amp;#39;t be too ambitious here – you may end up killing your enthusiasm&amp;quot;.

&lt;/p&gt;
&lt;p&gt;Now I realise this could be read as quite a negative statement; I&amp;#39;m in no way trying to squash ambition entirely – it can be an extremely powerful driving force. Where ambition &lt;em&gt;can&lt;/em&gt; have a negative effect is when you&amp;#39;re being over ambitious in an area you&amp;#39;re unfamiliar with.

&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s take game development as an example. If you set yourself some &lt;del&gt;ridiculous&lt;/del&gt; stretch goals early on (let&amp;#39;s say a 3D web-based &lt;abbr title=&quot;Massively Multiplayer Online&quot;&gt;MMO&lt;/abbr&gt; game) then unless you&amp;#39;re the kind of person who never gives up, your enthusiasm is likely to wane the more small hurdles you have to jump along the way. This kind of project is excellent once you&amp;#39;ve tried (and maybe failed) a few times on smaller things.


&lt;/p&gt;
&lt;h2&gt;A Bit Of Introspection&lt;/h2&gt;
&lt;p&gt;After the aforementioned conversation, I took a look through the &amp;#39;Web Projects&amp;#39; folder on my computer. The ratio of released/dead projects in here swings massively in favour of the latter. There&amp;#39;s a clear pattern too – they are nearly all very big projects which I have made a start on before I&amp;#39;ve tackled some of the smaller issues which ended up getting in the way early on. Despite my seemingly limitless enthusiasm for these projects in the early days, it slowly got eaten away until it was no longer a fun way to spend my spare time.

&lt;/p&gt;
&lt;p&gt;The &amp;#39;successful&amp;#39; projects have a pattern too: they&amp;#39;re all small, realistic, and fun. They&amp;#39;ve all been great learning projects and have paved the way for bigger and better things now that I&amp;#39;ve expanded my knowledge.

&lt;/p&gt;
&lt;p&gt;My personal take-away here is to remain ambitious, but also keep that side of myself in check. Recognise the pattern, and save some of the bigger projects for later!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>How To Sell Technology</title>
            <link href="http://rowanmanning.co.uk/posts/how-to-sell-technology"/>
            <published>2012-11-10T16:15:00+00:00</published>
            <updated>2012-11-10T16:15:00+00:00</updated>
            <id>http://rowanmanning.co.uk/posts/how-to-sell-technology</id>
            <content type="html">&lt;p&gt;I&amp;#39;m going to talk about something which irritates me; you&amp;#39;ll have to forgive me if I descend into a rant at first, but trust me – there&amp;#39;s a point to this!

&lt;/p&gt;
&lt;p&gt;The dressing up of technology in advertising doesn&amp;#39;t work for me. I like to know how the product looks, feels and works in as short a time as possible. The same principals apply to web design.


&lt;/p&gt;
&lt;h2&gt;Sell It To Me&lt;/h2&gt;
&lt;p&gt;Think about what makes you buy a product. For me, I&amp;#39;m attracted to a product if I believe it can make my life easier or more enjoyable in some way (and also if I think it will make me cooler… lol jk). For somebody looking for those qualities, it&amp;#39;s important to see the key features of the product very quickly. A common theme I&amp;#39;m seeing in tech advertising is a little worrying, there&amp;#39;s  no attempt to build a connection between potential customers and the product in question; what I&amp;#39;m seeing is an attempt to appeal to people&amp;#39;s impulse and sense of &amp;quot;cool&amp;quot;.

&lt;/p&gt;
&lt;p&gt;I can illustrate this very easily. Look at the following ad for Microsoft Surface, this is one of their launch pieces:

&lt;/p&gt;
&lt;iframe class=&quot;video&quot; src=&quot;http://www.youtube.com/embed/U7UlE-o8DQQ&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;You can also find a similar example with the &lt;a href=&quot;http://youtu.be/dpzu3HM2CIo&quot;&gt;Surface Teaser&lt;/a&gt; and tentatively the &lt;a href=&quot;http://youtu.be/F5wDYaxjbxg&quot;&gt;Motorola RAZR M Ad&lt;/a&gt;.

&lt;/p&gt;
&lt;p&gt;What does the Surface advert tell us about the product? The answer is nothing beyond some hardware details – I know it has a keyboard and a touch screen but what can I actually do with it? How will it make my life better?

&lt;/p&gt;
&lt;p&gt;As a comparison (don&amp;#39;t stamp me with &amp;quot;Fan-boy&amp;quot; yet), let&amp;#39;s look at the iPad launch ad:

&lt;/p&gt;
&lt;iframe class=&quot;video&quot; src=&quot;http://www.youtube.com/embed/_N3TW_HA-PE&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;I won&amp;#39;t make a list but from only thirty seconds of footage I know an awful lot about what the product actually does! It&amp;#39;s exciting. They haven&amp;#39;t even &lt;em&gt;really&lt;/em&gt; focused on the hardware, because that&amp;#39;s not what the customer cares about – the customer cares about functionality.

&lt;/p&gt;
&lt;p&gt;There are other product ads that recognise this too – the &lt;a href=&quot;http://youtu.be/6o0T44_4hb8&quot;&gt;Samsung Galaxy S3&lt;/a&gt; and the &lt;a href=&quot;http://youtu.be/SbXnCQtQTWc&quot;&gt;Nokia Lumia&lt;/a&gt;. Notice a pattern? They are letting the product sell itself.

&lt;/p&gt;
&lt;p&gt;I&amp;#39;ll pull up one more set of examples before I apply this to web design. Web Browsers aren&amp;#39;t particularly exciting to anyone outside of web development. However, watch this Internet Explorer advertisement and marvel at its ability to spend a whole minute &lt;em&gt;trying&lt;/em&gt; to make a browser look cool:

&lt;/p&gt;
&lt;iframe class=&quot;video&quot; src=&quot;http://www.youtube.com/embed/WA8sLsM3McU&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Then watch even just one of these &lt;a href=&quot;http://www.youtube.com/user/googlechrome&quot;&gt;Google Chrome commercials&lt;/a&gt;. Google have a different strategy here, they stop trying to talk about the browser and look at why and how we use it. They tell some very human stories which don&amp;#39;t try to dress up the product, In fact they avoid making their product the centre of attention at all.


&lt;/p&gt;
&lt;h2&gt;So How Does This Apply To Web Design?&lt;/h2&gt;
&lt;p&gt;The rights, wrongs, and near-atrocities of the highlighted adverts can be applied directly to building websites, particularly when working on a home page or landing page which is supposed to draw potential users/customers in.

&lt;/p&gt;
&lt;p&gt;The mistake I see in the Microsoft Surface ads is that they focus far too much on presentation over clear information. We&amp;#39;ve all seen this on the web before – the home page where you&amp;#39;re not able to find the information you need because of an overly distracting visual. In the advertisements from other tablet/phone manufacturers, we&amp;#39;re given a list of features which allow you to see the benefit of the product immediately. When designing a landing page your goal should be to deliver information to the user as quickly and efficiently as possible, not wow them with impressive visuals.

&lt;/p&gt;
&lt;p&gt;With the Internet Explorer commercial, to an outsider it may not even be clear what the ad is about. They&amp;#39;ve made the mistake of trying to make a browser look amazing to regular people, many of whom &lt;a href=&quot;http://youtu.be/o4MwTvtyrUQ&quot;&gt;don&amp;#39;t even know what a browser is&lt;/a&gt;. If you&amp;#39;re faced with the problem of promoting a product which is not very easily understandable, then a good way to do this is to tell a story. A story can not only help someone understand an abstract concept, but can also really help them see &lt;em&gt;value&lt;/em&gt; in it – they connect with the human element in a story.


&lt;/p&gt;
&lt;h2&gt;To Conclude&lt;/h2&gt;
&lt;p&gt;So, I probably took quite a long time to get to quite a simple point, but I thought it would be nice to illustrate the importance of user-focused design with a more &amp;#39;real-world&amp;#39; example (and vent a little of my personal frustration).

&lt;/p&gt;
&lt;p&gt;Next time you&amp;#39;re working on a design (or anything else targeted at customers for that matter), remember to think about the information they need before you think about ways to make your product look &amp;#39;hip&amp;#39; and &amp;#39;cool&amp;#39;. They will thank you for it, and I won&amp;#39;t rant about it :)&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Why I Built Another CSS Grid</title>
            <link href="http://rowanmanning.co.uk/posts/why-another-css-grid"/>
            <published>2012-07-24T21:34:00+00:00</published>
            <updated>2012-07-24T21:34:00+00:00</updated>
            <id>http://rowanmanning.co.uk/posts/why-another-css-grid</id>
            <content type="html">&lt;p&gt;A couple of months ago, I decided to set about building a CSS grid system. I realise that I&amp;#39;ve entered a wildly bloated landscape here (you can&amp;#39;t move on the web for fancy new grid systems) but I had my reasons. I&amp;#39;d like to talk about why I built a grid system, and why (maybe) you should too.


&lt;/p&gt;
&lt;h2&gt;My Problem&lt;/h2&gt;
&lt;p&gt;When my website went through its last rebuild, I realised that there was no way I could get by without some kind of grid. I wrote down a couple of requirements that I had:

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fluidity - fixed-width layouts don&amp;#39;t do it for me.&lt;/li&gt;
&lt;li&gt;Responsivity - I don&amp;#39;t think it&amp;#39;s sensible to not provide at least a basic mobile-optimised view.&lt;/li&gt;
&lt;li&gt;IE7 support - a contentious one, I know, but I want at least a sensible looking page in older browsers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With these requirements in mind, I decided to have a look at what was available. It didn&amp;#39;t take me long to realise that there are a million projects out there; a split between massively overcomplicated frameworks which try to &lt;a href=&quot;http://www.rachelandrew.co.uk/archives/2012/03/21/stop-solving-problems-you-dont-yet-have/&quot;&gt;solve every problem in the world&lt;/a&gt; and neat little &lt;a href=&quot;http://1kbgrid.com/&quot;&gt;micro-grids&lt;/a&gt;. While there were some really great libraries, none of them felt quite right for me – I&amp;#39;m hard to please.


&lt;/p&gt;
&lt;h2&gt;Building&lt;/h2&gt;
&lt;p&gt;What suprised me is how quickly I ended up with a good working (IE 6+) prototype. Not only was it fast, but I had a lot of fun!

&lt;/p&gt;
&lt;p&gt;After a couple of hours spent tweaking and testing, I &lt;a href=&quot;http://frag.rowanmanning.com/&quot;&gt;ended up with Frag&lt;/a&gt;. It&amp;#39;s not perfect, it&amp;#39;s not extremely feature-rich, but it does exactly the job I need it to do.

&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://frag.rowanmanning.com/&quot;&gt;&lt;img src=&quot;http://rowanmanning.co.uk/media/images/posts/frag-website-screengrab.jpg&quot; alt=&quot;A screen-grab of the Frag website&quot;&gt;&lt;/a&gt;


&lt;/p&gt;
&lt;h2&gt;So Why Build Your Own?&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m not advocating rolling your own in every situation, but there are a lot of benefits to spending a little time on your own solution to a problem:

&lt;/p&gt;
&lt;dl&gt;

    &lt;dt&gt;Learning&lt;/dt&gt;
    &lt;dd&gt;I learnt a lot in the process of building Frag, particularly about &lt;a href=&quot;https://developer.mozilla.org/en/CSS/Media_queries/&quot;&gt;CSS3 media queries&lt;/a&gt;. I don&amp;#39;t know about you, but I love to learn; throwing yourself into a problem is nearly always the best way to do this.&lt;/dd&gt;

    &lt;dt&gt;Understanding&lt;/dt&gt;
    &lt;dd&gt;The benefit of understanding the code you&amp;#39;re using inside out is massive. There&amp;#39;s nearly always an overhead when learning how to use third-party software. Sometimes, for simple things, this is avoidable by building it yourself.&lt;/dd&gt;

    &lt;dt&gt;Giving Back&lt;/dt&gt;
    &lt;dd&gt;Whether or not you expect anyone to use it, you can get a pretty good feeling from releasing open-source software. You might help someone out with a project or with learning a new technology. This is awesome!&lt;/dd&gt;

&lt;/dl&gt;

&lt;p&gt;If you do end up building something great as a result of this post, I&amp;#39;d be really interested to take a look: tweet it at me!

&lt;/p&gt;
&lt;p&gt;And if you don&amp;#39;t fancy building your own grid system, you could always &lt;a href=&quot;http://frag.rowanmanning.com/&quot;&gt;use Frag&lt;/a&gt; ;)


&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Accessibility: Beyond The Screen-Reader</title>
            <link href="http://rowanmanning.co.uk/posts/accessibility-beyond-the-screen-reader"/>
            <published>2012-06-19T21:05:00+00:00</published>
            <updated>2012-06-20T10:30:00+00:00</updated>
            <id>http://rowanmanning.co.uk/posts/accessibility-beyond-the-screen-reader</id>
            <content type="html">&lt;p&gt;I&amp;#39;d like to begin this post with a disclaimer: I&amp;#39;m not an accessibility expert. In fact, web accessibility scares me; it&amp;#39;s that daunting consideration when kicking off a web project that can send shivers down the spines of the hardiest developers. Luckily, us web folk love a challenge!

&lt;/p&gt;
&lt;p&gt;The purpose of this post is to talk about the common misunderstanding that accessibility means catering for blind people almost exclusively. I&amp;#39;ve found myself frustrated by “accessibility tunnel-vision” on a number of occasions recently which has inspired me to explain &lt;em&gt;my&lt;/em&gt; understanding of web accessibility. Who exactly are we trying to cater for? We&amp;#39;ll start with the obvious:


&lt;/p&gt;
&lt;h2&gt;Blind Or Partially Sighted Users&lt;/h2&gt;
&lt;p&gt;This is the user that we tend to jump to when accessibility is mentioned. These users may rely completely on assistive technology, such as a screen-reader, to access the web. Partially sighted or vision-impaired users may not rely on a screen-reader, but will find it difficult to read content if the type is too small or cannot be zoomed.

&lt;/p&gt;
&lt;p&gt;There are a wealth of resources available to help make our websites work well for this group. In order to achieve a basic level of support, it helps to ensure that your website is usable in a &lt;a href=&quot;http://lynx.browser.org/&quot; title=&quot;The Lynx Browser&quot;&gt;text-based browser such as Lynx&lt;/a&gt; – writing sensible, semantic markup is a first step. I also can&amp;#39;t emphasise what an eye-opener it is to &lt;a href=&quot;http://webaim.org/articles/screenreader_testing/&quot; title=&quot;Testing with Screen Readers: Questions and Answers&quot;&gt;try and use a screen-reader yourself&lt;/a&gt;.

&lt;/p&gt;
&lt;p&gt;Vision impaired users can be catered for by keeping your type sizes sensible (personal preference: &lt;code&gt;&amp;gt;=16px&lt;/code&gt;), and ensuring that your content is zoomable. You&amp;#39;ll make this a lot easier by using a scalable font measurement in your CSS such as &lt;code&gt;em&lt;/code&gt; or &lt;code&gt;rem&lt;/code&gt;.


&lt;/p&gt;
&lt;h2&gt;Colour-Blind Users&lt;/h2&gt;
&lt;p&gt;Colour-blind users may find it hard to distinguish between elements on a page if they are similar in colour. This can become a problem when the contrast between two elements is important; for example, between your website text and background. People with even mild colour-blindness may find it difficult to read content.

&lt;/p&gt;
&lt;p&gt;When it comes to catering for colour-blind users, subtlety becomes your enemy; there are some great &lt;a href=&quot;http://snook.ca/technical/colour_contrast/colour.html&quot; title=&quot;Colour Contrast Checking Tool&quot;&gt;contrast checking tools online&lt;/a&gt; which can help you immensely.


&lt;/p&gt;
&lt;h2&gt;Users With Physical Disabilities&lt;/h2&gt;
&lt;p&gt;Physical disabilities can encompass anything from minor impairments of motor-skills to paralysis. Motor impairments are common in elderly web users who may rely on a keyboard alone to browse the web – using a mouse requires small, precise hand movements.

&lt;/p&gt;
&lt;p&gt;Ensuring that your website is keyboard-accessible is important, it&amp;#39;s also quite easy to test: unplug your mouse! There are quite a few resources around the web on this topic, and &lt;a href=&quot;http://www.456bereastreet.com/archive/201104/keyboard_accessibility_again/&quot; title=&quot;Some useful quick-tips on keyboard accessibility&quot;&gt;fixing up your website for keyboard users&lt;/a&gt; is actually relatively easy.


&lt;/p&gt;
&lt;h2&gt;Users With Cognitive Disabilities&lt;/h2&gt;
&lt;p&gt;Cognitive disabilities get little air-time in my opinion, yet conditions such as dyslexia are extremely common. The diversity of this group is huge, and cognitive disabilities can have an adverse effect on memory; problem solving; attention; and reading, linguistic and verbal comprehension to name a few:

&lt;/p&gt;
&lt;dl&gt;

    &lt;dt&gt;Memory&lt;dt&gt;
    &lt;dd&gt;Some users may have difficulties with their long, mid or short-term memories. This can be an issue when moving through a stepped sign-up or purchasing process for example. Clear sign-posting and guidance is essential for these users.&lt;/dd&gt;

    &lt;dt&gt;Problem solving&lt;dt&gt;
    &lt;dd&gt;For users who have trouble problem-solving, things like form errors or unclear instructions are a nightmare. Instructions should be clear and large changes to the page should be explained to the user.&lt;/dd&gt;

    &lt;dt&gt;Attention&lt;/dt&gt;
    &lt;dd&gt;Users with conditions such as &lt;abbr title=&quot;Attention Deficit Hyperactivity Disorder&quot;&gt;ADHD&lt;/abbr&gt; often struggle to maintain concentration when completing a task. Avoiding background noise on a page and using visual cues to highlight important content helps these users.&lt;/dd&gt;

    &lt;dt&gt;Reading, linguistic and verbal comprehension&lt;/dt&gt;
    &lt;dd&gt;This broad category ranges from problems understanding long or complex words and sentence structure, to difficulty processing non-literal text such as sarcasm, metaphor or slang. Clear document structure, supplemental media and uncomplicated writing can help these users a lot.&lt;/dd&gt;

&lt;/dl&gt;

&lt;p&gt;For more information, I can&amp;#39;t recommend this &lt;a href=&quot;http://webaim.org/articles/cognitive/&quot; title=&quot;In-depth article on cognitive disabilities and the web&quot;&gt;article on cognitive disabilities&lt;/a&gt; enough. It goes into far more depth than I could on the subject!


&lt;/p&gt;
&lt;h2&gt;To Conclude&lt;/h2&gt;
&lt;p&gt;So I hope I haven&amp;#39;t made accessibility an even scarier word for you! Granted there&amp;#39;s a lot to consider, and accessibility can seem like a bit of a minefield, but building accessible websites can be an extremely rewarding endeavour.

&lt;/p&gt;
&lt;p&gt;By thinking about these users while you build, not only will you help people with disabilities, but many of the relatively small improvements listed in this post will make your site more usable for &lt;em&gt;everyone&lt;/em&gt;.

&lt;/p&gt;
&lt;p&gt;Thanks for reading,
Rowan


&lt;/p&gt;
</content>
        </entry>
    

</feed>